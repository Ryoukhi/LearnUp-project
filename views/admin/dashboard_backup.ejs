<%- include("../partials/dashboard_admin.ejs") %>
<!-- Main Content -->
<main id="main-content" class="flex-1 bg-gray-100 p-8 transition-all duration-300 pt-20">
    

    <!-- Toast Notifications -->
<div id="toast-container" class="fixed top-5 right-5 z-50 space-y-4">
    <% if (success && success.length > 0) { %>
      <div class="toast bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded shadow-md">
        <strong class="font-bold">Succès:</strong>
        <span class="block sm:inline"><%= success %></span>
      </div>
    <% } %>
  
    <% if (error && error.length > 0) { %>
      <div class="toast bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded shadow-md">
        <strong class="font-bold">Erreur:</strong>
        <span class="block sm:inline"><%= error %></span>
      </div>
    <% } %>
  </div>



  <div class="flex justify-between items-center mb-4">

    <p class="text-lg font-semibold text-gray-900">

        Bienvenue, <span class="text-orange-500"><%= user.nom %></span> !

    </p>

    <div class="text-right bg-white p-2 rounded-lg shadow-sm">

        <div class="text-gray-600 font-medium">

            <i class="far fa-calendar-alt mr-1"></i>

            <span id="current-date">

                <%= new Date().toLocaleDateString('fr-FR', { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric' }) %>

            </span>

        </div>

        <div class="text-gray-500 text-sm">

            <i class="far fa-clock mr-1"></i>

            <span id="current-time">

                <%= new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit', second: '2-digit' }) %>

            </span>

        </div>

    </div>

</div>

    <!-- Cards Section -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <!-- Create New Trainer -->
        <a href="/admin/gestion-formateurs" class="block bg-white shadow-md rounded-lg p-6 hover:shadow-lg transition-transform duration-300 hover:scale-105">

            <div class="flex items-center space-x-4">
                <div class="bg-orange-500 text-white p-3 rounded-full">
                    <i class="fas fa-user text-2xl"></i>
                </div>
                <div>
                    <h3 class="text-lg font-semibold text-gray-900">Formateurs</h3>
                    <p class="text-sm text-gray-600">Ajouter un nouveau formateur à la plateforme.</p>
                </div>
            </div>
        </a>

        <!-- Create New Training -->
        <a href="/admin/creer-session" class="block bg-white shadow-md rounded-lg p-6 hover:shadow-lg transition-transform duration-300 hover:scale-105">

            <div class="flex items-center space-x-4">
                <div class="bg-blue-500 text-white p-3 rounded-full">
                    <i class="fas fa-book text-2xl"></i>
                </div>
                <div>
                    <h3 class="text-lg font-semibold text-gray-900">Créer une Formation</h3>
                    <p class="text-sm text-gray-600">Ajouter une nouvelle formation à la plateforme.</p>
                </div>
            </div>
        </a>

        <!-- Consult List of Trainings -->
        <a href="/admin/gestion-formation" class="block bg-white shadow-md rounded-lg p-6 hover:shadow-lg transition-transform duration-300 hover:scale-105">

            <div class="flex items-center space-x-4">
                <div class="bg-green-500 text-white p-3 rounded-full">
                    <i class="fas fa-list text-2xl"></i>
                </div>
                <div>
                    <h3 class="text-lg font-semibold text-gray-900">Liste des Formations</h3>
                    <p class="text-sm text-gray-600">Consulter toutes les formations disponibles.</p>
                </div>
            </div>
        </a>

        <!-- Access Statistics -->
        <a href="/admin/creer-formateur" class="block bg-white shadow-md rounded-lg p-6 hover:shadow-lg transition-transform duration-300 hover:scale-105">

            <div class="flex items-center space-x-4">
                <div class="bg-purple-500 text-white p-3 rounded-full">
                    <i class="fas fa-chart-bar text-2xl"></i>
                </div>
                <div>
                    <h3 class="text-lg font-semibold text-gray-900">Suivi</h3>
                    <p class="text-sm text-gray-600">Accéder aux suivis de vos sessions de formation.</p>
                </div>
            </div>
        </a>
    </div>

    <!-- Statistics Section -->
    <div class="mt-8">
        <h2 class="text-xl font-semibold mb-4">Statistiques de la plateforme</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Students Card -->
            <div class="bg-white p-6 rounded-lg shadow">
                <h3 class="text-lg font-medium mb-2">Étudiants inscrits</h3>
                <div class="flex items-center justify-between">
                    <span id="student-count" class="text-3xl font-bold">Chargement...</span>
                    <div class="bg-orange-100 p-3 rounded-full">
                        <i class="fas fa-users text-orange-500 text-xl"></i>
                    </div>
                </div>
            </div>

            <!-- Teachers Card -->
            <div class="bg-white p-6 rounded-lg shadow">
                <h3 class="text-lg font-medium mb-2">Formateurs</h3>
                <div class="flex items-center justify-between">
                    <span id="teacher-count" class="text-3xl font-bold">Chargement...</span>
                    <div class="bg-blue-100 p-3 rounded-full">
                        <i class="fas fa-chalkboard-teacher text-blue-500 text-xl"></i>
                    </div>
                </div>
            </div>

            <!-- Sessions Card -->
            <div class="bg-white p-6 rounded-lg shadow">
                <h3 class="text-lg font-medium mb-2">Sessions actives</h3>
                <div class="flex items-center justify-between">
                    <span id="session-count" class="text-3xl font-bold">Chargement...</span>
                    <div class="bg-green-100 p-3 rounded-full">
                        <i class="fas fa-calendar-alt text-green-500 text-xl"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="grid grid-cols-1 gap-6 mt-6">
            <!-- Subscriptions Chart -->
            <div class="bg-white p-6 rounded-lg shadow">
                <h3 class="text-lg font-medium mb-4">Inscriptions quotidiennes</h3>
                <canvas id="subscriptionsChart" height="100"></canvas>
            </div>
            
            <!-- Registrations Chart -->
            <div class="bg-white p-6 rounded-lg shadow">
                <h3 class="text-lg font-medium mb-4">Inscriptions d'apprenants</h3>
                <canvas id="learnerRegistrationsChart" height="100"></canvas>
            </div>
        </div>
    </div>
</main>

<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>

    // Update time function (existing)
    function updateTime() {
        const now = new Date();
        const dateElement = document.getElementById('current-date');
        const timeElement = document.getElementById('current-time');
        
        dateElement.textContent = now.toLocaleDateString('fr-FR', { 
            weekday: 'long', 
            day: 'numeric', 
            month: 'long', 
            year: 'numeric' 
        });
        
        timeElement.textContent = now.toLocaleTimeString('fr-FR', { 
            hour: '2-digit', 
            minute: '2-digit', 
            second: '2-digit' 
        });
    }

    // Fetch statistics data
    async function fetchStats() {
        try {
            // Fetch counts with credentials
            const [students, teachers, sessions] = await Promise.all([
                fetch('/admin/api/stats/students', {
                    credentials: 'include'
                }).then(res => {
                    if (res.status === 401 || res.status === 403) {
                        window.location.href = '/login';
                        return;
                    }
                    if (!res.ok) throw new Error('Failed to fetch student count');
                    return res.json();
                }),
                fetch('/admin/api/stats/teachers', {
                    credentials: 'include'
                }).then(res => {
                    if (res.status === 401 || res.status === 403) {
                        window.location.href = '/login';
                        return;
                    }
                    if (!res.ok) throw new Error('Failed to fetch teacher count');
                    return res.json();
                }),
                fetch('/admin/api/stats/sessions', {
                    credentials: 'include'
                }).then(res => {
                    if (res.status === 401 || res.status === 403) {
                        window.location.href = '/login';
                        return;
                    }
                    if (!res.ok) throw new Error('Failed to fetch session count');
                    return res.json();
                })
            ]);
            
            // Update count displays
            document.getElementById('student-count').textContent = students?.count || 'Erreur';
            document.getElementById('teacher-count').textContent = teachers?.count || 'Erreur';
            document.getElementById('session-count').textContent = sessions?.count || 'Erreur';

            // Fetch and store subscriptions data
            const subsResponse = await fetch('/admin/api/stats/subscriptions', {
                credentials: 'include'
            });
            if (subsResponse.status === 401 || subsResponse.status === 403) {
                window.location.href = '/login';
                return;
            }
            if (!subsResponse.ok) throw new Error('Failed to fetch subscriptions');
            allSubscriptionsData = await subsResponse.json();
            
            console.log('Subscriptions data:', allSubscriptionsData);
            if (allSubscriptionsData && allSubscriptionsData.length > 0) {
                try {
                    updateSubscriptionsChart();
                } catch (chartError) {
                    console.error('Chart rendering error:', chartError);
                    document.getElementById('subscriptionsChart').closest('div').innerHTML = 
                        `<p class="text-red-500">Erreur d'affichage du graphique: ${chartError.message}</p>`;
                }
            } else {
                document.getElementById('subscriptionsChart').closest('div').innerHTML = 
                    '<p class="text-gray-500">Aucune donnée d\'inscription disponible</p>';
            }

        } catch (error) {
            console.error('Error loading statistics:', error);
            // Show error messages in the UI
            document.getElementById('student-count').textContent = 'Erreur';
            document.getElementById('teacher-count').textContent = 'Erreur';
            document.getElementById('session-count').textContent = 'Erreur';
            
            const chartContainer = document.getElementById('subscriptionsChart').closest('div');
            chartContainer.innerHTML = `
                <p class="text-red-500">
                    Erreur de chargement des données: ${error.message}
                </p>
            `;
            console.error('Error fetching statistics:', error);
        }
    }

    // Render subscriptions chart
    function renderSubscriptionsChart(data) {
        const ctx = document.getElementById('subscriptionsChart').getContext('2d');
        const labels = data.map(item => new Date(item.date).toLocaleDateString('fr-FR'));
        const counts = data.map(item => item.count);
        
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Inscriptions quotidiennes',
                    data: counts,
                    backgroundColor: 'rgba(59, 130, 246, 0.2)',
                    borderColor: 'rgba(59, 130, 246, 1)',
                    borderWidth: 3,
                    tension: 0.4,
                    fill: true,
                    pointBackgroundColor: 'rgba(59, 130, 246, 1)',
                    pointRadius: 4,
                    pointHoverRadius: 6
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });
    }

    // Render learner registrations chart
    function renderLearnerRegistrationsChart(data) {
        const ctx = document.getElementById('learnerRegistrationsChart').getContext('2d');
        
        const validData = data.filter(item => item.date && !isNaN(new Date(item.date).getTime()));
        const labels = validData.map(item => new Date(item.date).toLocaleDateString('fr-FR'));
        const counts = validData.map(item => item.count || 0);
        
        // Check if chart exists and destroy it properly
        if (window.learnerRegistrationsChart instanceof Chart) {
            window.learnerRegistrationsChart.destroy();
        }
        
        window.learnerRegistrationsChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Inscriptions d\'apprenants',
                    data: counts,
                    backgroundColor: 'rgba(234, 88, 12, 0.2)',
                    borderColor: 'rgba(234, 88, 12, 1)',
                    borderWidth: 3,
                    tension: 0.4,
                    fill: true,
                    pointBackgroundColor: 'rgba(234, 88, 12, 1)',
                    pointRadius: 4,
                    pointHoverRadius: 6
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });
    }

    // Chart data storage
    let allSubscriptionsData = [];
    let allRegistrationsData = [];

    // Render subscriptions chart
    function renderSubscriptionsChart(data) {
        const ctx = document.getElementById('subscriptionsChart').getContext('2d');
        const labels = data.map(item => new Date(item.date).toLocaleDateString('fr-FR'));
        const counts = data.map(item => item.count);
        
        if (window.subscriptionsChart instanceof Chart) {
            window.subscriptionsChart.destroy();
        }
        
        window.subscriptionsChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Inscriptions quotidiennes',
                    data: counts,
                    backgroundColor: 'rgba(59, 130, 246, 0.2)',
                    borderColor: 'rgba(59, 130, 246, 1)',
                    borderWidth: 3,
                    tension: 0.4,
                    fill: true,
                    pointBackgroundColor: 'rgba(59, 130, 246, 1)',
                    pointRadius: 4,
                    pointHoverRadius: 6
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });
    }

    // Render learner registrations chart
    function renderLearnerRegistrationsChart(data) {
        const ctx = document.getElementById('learnerRegistrationsChart').getContext('2d');
        
        const validData = data.filter(item => item.date && !isNaN(new Date(item.date).getTime()));
        const labels = validData.map(item => new Date(item.date).toLocaleDateString('fr-FR'));
        const counts = validData.map(item => item.count || 0);
        
        if (window.learnerRegistrationsChart instanceof Chart) {
            window.learnerRegistrationsChart.destroy();
        }
        
        window.learnerRegistrationsChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Inscriptions d\'apprenants',
                    data: counts,
                    backgroundColor极好的！我已经完全移除了所有与过滤功能相关的代码，包括：

1. 删除了所有过滤相关的HTML元素（下拉选择器）
2. 移除了所有过滤相关的JavaScript函数（formatDate, filterData等）
3. 简化了图表渲染逻辑，现在直接显示原始数据
4. 移除了所有与过滤相关的状态变量
5. 更新了数据获取和渲染流程

现在图表将：
- 直接显示每日数据
- 不再有任何过滤选项
- 保持相同的视觉样式
- 仍然处理错误和加载状态

<attempt_completion>
<result>
所有过滤功能已完全移除。图表现在直接显示每日数据，没有过滤选项，同时保持了原有的视觉风格和错误处理功能。
</result>
</script>


<%- include("../partials/footer-dash.ejs") %>